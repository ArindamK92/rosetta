#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import pathlib
import sys
print(pathlib.Path(__file__).parent.absolute() / 'lib')
sys.path.insert(0, str(pathlib.Path(__file__).parent.parent.absolute() / 'lib'))
#sys.path.insert(0, '/home/meinersbur/src/rosetta/rosetta/lib')


from rosetta import *
import argparse
import pathlib 
import configparser


def cquote(s):
    # TODO: More escaping
    s = str(s)
    s = s.replace("\\", "\\\\")
    s = s.replace("\n", "\\n")
    return '"' + s + '"'


def gen_config(output, benchname,problemsizefile,resultsdir,compiler,compilerflags):
    config = configparser.ConfigParser()
    config.read(problemsizefile)
    n = config.getint(benchname, 'n')

    # Consider a static initializer which calls into the rosetta library if global symbols are problematic.
    content = f"""/* autogenerated by Rosetta genconfig.py */
#include <cstdint>

// Configuration properties
const char *rosetta_default_results_dir = {cquote(resultsdir)};
const char *rosetta_compiler = {cquote(compiler)};
const char *rosetta_compiler_flags = {cquote(compilerflags)};

// Benchmark properties
const char *bench_name = {cquote(benchname)};
int64_t bench_default_problemsize = {n};
"""

    # TODO: Don't replace if identical for ninja to know there's no recompile needed
    with output.open('w+') as f:
        f.write(content)



def main():
    parser = argparse.ArgumentParser(description="Benchmark configuration file generator", allow_abbrev=False)
    parser.add_argument('--output', type=pathlib.Path)
    parser.add_argument('--resultsdir', type=pathlib.Path)
    parser.add_argument('--compiler', type=pathlib.Path)
    parser.add_argument('--compiler-flags')

    parser.add_argument('--benchname')
    parser.add_argument('--problemsizefile',  type=pathlib.Path)
    args = parser.parse_args()

    gen_config(output = args.output, benchname = args.benchname, problemsizefile =args.problemsizefile,resultsdir=args.resultsdir,
    compiler=args.compiler,
    compilerflags=args.compiler_flags)



if __name__ == '__main__':
    retcode = main()
    if retcode:
        exit(retcode)



